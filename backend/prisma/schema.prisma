// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String
  age          Int
  gender       String
  lookingFor   String
  bio          String
  photoUrl     String
  photos       String[]
  location     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sentSwipes     Swipe[] @relation("SwipeSender")
  receivedSwipes Swipe[] @relation("SwipeReceiver")

  matchesAsUser1 Match[] @relation("User1Matches")
  matchesAsUser2 Match[] @relation("User2Matches")

  sentMessages Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")

  @@index([gender, lookingFor])
}

model Swipe {
  id        String   @id @default(uuid())
  swiperId  String
  swiper    User     @relation("SwipeSender", fields: [swiperId], references: [id], onDelete: Cascade)
  swipedId  String
  swiped    User     @relation("SwipeReceiver", fields: [swipedId], references: [id], onDelete: Cascade)
  direction String
  createdAt DateTime @default(now())

  @@unique([swiperId, swipedId])
  @@index([swiperId])
  @@index([swipedId])
}

model Match {
  id String @id @default(uuid())
  user1Id String
  user1 User @relation("User1Matches", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id String
  user2 User @relation("User2Matches", fields: [user2Id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  messages Message[]

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}

model Message {
  id String @id @default(uuid())
  matchId String
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  senderId String
  sender User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade) 
  receiverId String
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  content String
  read Boolean @default(false)
  createdAt DateTime @default(now())

  @@index([matchId])
  @@index([senderId])
  @@index([receiverId])

}
